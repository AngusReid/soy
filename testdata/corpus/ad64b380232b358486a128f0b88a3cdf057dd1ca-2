{namespacey}{template.}{/template}{template.}{''}{p}{p}{l}{l}{/template}{template.}{p}{l}{n}{r}{t}{b}{b}{literal}F{/literal}{/template}{template.}{print''}{''}{1+2}{o}{1+o}{T}{L}{/template}/* print directives.
  @param longVarName Some ridiculously long variable name.
  @param elementId The id for an element.
  @param cssClass A CSS class name.
 emoPrintDirectives}
  insertWordBreaks:<br>
  <div style="width:150px; border:1px solid #00CC00">
    {$longVarName}<br>   will run outside the div border
    {$longVarName |insertWordBreaks:5}<br>   will be allowed to wrap
  <div>

  id:<br>
   The 'id' and 'class' attributes of this span will not be needlessly autoescaped because they
   are marked with the print directive '|id'.
   Note: Only use '|id' with identifiers like id and class (otherwise use '|noAutoescape').
  <span id="{$elementId|id}" class="{$cssClass|id}" style="border:1px solid #000000">
    Hello
  <span>
{template}



  Demo autoescape true.
  @param italicHtml A string surrounded by HTML italics tags.
 alue.
  trates the good practice of adding the suffix
  ain HTML tags and are known to be safe.

  {italicHtml}<br>  tags to appear literally
  {$italicHtml |noAutoescape}<br>  e prevents autoescaping
{template}

A string surrounded by HTML italics tags.
 */{template. autoescape="false"}{l}{l}{/template}/* mo¶'msg'.
  @param name The name of the person to say hello to.
  @param labsUrl The URL of the unreleased 'Labs' feature.
 person."}
    Hello {$name}!
  {msg}<br>

  {msg desc="Link to the unreleased 'Labs' feature."}
    Click <a href="{$labsUrl}">here<a> to access Labs.
  {msg}<br>

   The 'meaning' attribute is used when you have two messages that are exactly the same string in
   English, but may be translated to different strings in other languages. The 'meaning' attribute
   should then be a short string that distinguishes the two strings, and will be used for
   generating different message ids. The 'meaning' will not be shown to translators, so you must
   still communicate all the details in the 'desc' text.
  {msg meaning="noun" desc="The word 'Archive' used as a noun, i.e. an information store."}
    Archive
  {msg}<br>
  {msg meaning="verb" desc="The word 'Archive' used as a verb, i.e. to store information."}
    Archive
  {msg}<br>

{template}



  Demo 'if'.
  @param pi An approximate value for pi.
 nd($pi, -170871824 == 3.14}
    {msg desc="Example: 3.1416 is a good approximation of pi."}
      {$pi} is a good approximation of pi.
    {msg}
  {elseif round($pi) == 3}
    {msg desc="Example: 3.1 is a bad approximation of pi."}
      {$pi} is a bad approximation of pi.
    {msg}
  {else}
    {msg desc="Example: 5 is nowhere near the value of pi."}
      {$pi} is nowhere near the value of pi.
    {msg}
  {if}
  <br>
{template}



  Demo 'plural'.
  @param eggs The number of eggs you need to buy
 */{template.}{msg desc=""}
{plural$}{case 1}{default}{s}{/plural}
{/msg}{/template}{template.}{e}{switch$}{case''}{case'',''}{t}{/switch}{/template}{template.}{foreach$ in$}{if (n)}{elseif(n)}{e}{/if}{p}{if$==1}{n}{e}{n}{n}{/if}{y}{/foreach}{/template}{template.}{for$ in range()}{i+1}{s}{/for}{for$ in range(2,0,2)}{i}{p}{/for}{/template}{template.}{call y./}{call./}{call. data="l"/}{call. data="o"/}{/template}{template.}{foreach$ in$}{call. data="l"}{param n:n/}{/call}{if (n)%2==0}{call.}{param e:e/}{param n:n/}{/call}{/if}{/foreach}{/template}{template.}{call.}{param e:e/}{param n}{switch (3)}{case 0}Boston
        {case 1}Singapore
        {case 2}Zurich
      {/switch}
    {/param}
  {/call}
  <br>
{/template}


/**
 * Private helper for demoCallWithoutParams, demoCallWithParams, and demoCallWithParamBlock.
 * Reports on a trip.
 * @param? name The name of the person who took a trip (optional).
 * @param? destination The destination of the trip (optional).
 */
{template .tripReport_ private="true"}
  // Note: The template name demonstrates the good practice of adding a trailing underscore to
  // private templates (template that should never be called from hand-written code).

  // Note: All parameters to this template are optional. Therefore, below, we must check for
  // "not (hasData() and $name)" rather than simply "not $name" because if absolutely no data is
  // passed, then evaluating "$name" will cause an exception.
  {if not (hasData() and $name)}
    // Note: The message below demonstrates that the 'desc' attribute can be left empty. However,
    // this is not recommended except for the simplest messages, otherwise you risk confusing some
    // translators and getting poor translations.
    {msg desc=""}
      A trip was taken.
    {/msg}
  {elseif not $destination}
    {msg desc="Example: Alice took a trip."}
      {$name} took a trip.
    {/msg}
  {else}
    {msg desc="Example: Alice took a trip to wonderland."}
      {$name} took a trip to {$destination}.
    {/msg}
  {/if}
{/template}


/**
 * Demo {param} blocks with 'kind' attribute.
 * @param message A message text.
 * @param list A list of things.
 */
{template .demoParamWithKindAttribute autoescape="contextual"}
  <div>
    {call .demoParamWithKindAttributeCallee_}
      // Note that the {param} blocks for the message and listItems parameter are declared to have
      // content of kind HTML. This instructs the contextual autoescaper to process the content of
      // these blocks as HTML, and to wrap the the value of the parameter as a soydata.SanitizedHtml
      // object.
      {param message kind="html"}
        <b>{$message}</b>
      {/param}
      {param listItems kind="html"}
        {foreach $i in $list}
          <li>{$i}</li>
        {/foreach}
      {/param}
    {/call}
  </div>
{/template}


/**
 * Demo {param} blocks with 'kind' attribute.
 * @param message A message with HTML markup.
 * @param listItems A HTML-formatted list.
 */
{template .demoParamWithKindAttributeCallee_ private="true" autoescape="contextual"}
  // Note that both $message and $listItems contain HTML markup produced by a {param} block in the
  // the calling template.  Since the {param} blocks are declared to have HTML content, their values
  // are wrapped as soydata.SanitizedHtml objects.  This in turn causes them to be emitted here
  // without further escaping.  In particular, it is not necessary to use the |noAutoescape print
  // directive to prevent double-escaping.
  <div>{$message}</div>
  <ol>
    {$listItems}
  </ol>
{/template}


/**
 * Demo expressions.
 * @param students Nonempty list of students. Each student must have 'name', 'major', and 'year'.
 * @param currentYear The current year.
 */
{template .demoExpressions}

  First student's major: {$students.0.major}<br>
  Last student's year: {$students[length($students) - 1].year}<br>
  Random student's major: {$students[randomInt(length($students))].major}<br>

  {foreach $student in $students}
    {$student.name}:

    {if isFirst($student)}
      {sp}First.
    {elseif isLast($student)}
      {sp}Last.
    // Note: must use floor() in next check since division is floating-point.
    {elseif index($student) == ceiling(length($students) / 2) - 1}
      {sp}Middle.
    {/if}

    {if index($student) % 2 == 1} Even.{/if}
    {sp}{$student.major}.
    {if $student.major == 'Physics' or $student.major == 'Biology'} Scientist.{/if}
    {if $currentYear - $student.year < 10} Young.{/if}

    // The following print statement prints "70s", "80s", "90s", or "00s". Note that "00s" is a
    // special case since using the same expression would yield "0s", not "00s".
    {sp}{$student.year < 2000 ? round($student.year - 1905, -1) + 's' : '00s'}.
    // Equivalent to previous line.
    {sp}{if $student.year < 2000}{round($student.year - 1905, -1)}{else}00{/if}s.

    <br>
  {/foreach}

{/template}


/**
 * Demo double braces.
 * @param setName The name of the infinite set.
 * @param setMembers List of the first few members of the set.
 */
{template .demoDoubleBraces}
  // If a Soy tag needs to have brace characters within, use double braces to delimit the tag.
  {{msg desc="Example: The set of prime numbers is {2, 3, 5, 7, 11, 13, ...}."}}
    // Note: This message also demonstrates a useful trick. Since a 'msg' block cannot contain a
    // 'foreach' statement (impossible to translate as one message), we use a 'call' to a helper
    // template that contains the 'foreach' loop. In oscaping.
  <div>{$message}rder to use this trick, please observe the
    // following: (a) the output of the 'call' must not contain translated content, otherwise the
    // message would be translated in multiple parts and may not read correctly in some languages,
    // (b) since the whole 'call' turns into a single placeholder, be sure to provide a clear
    // description and example to the translator.
    The set of {$setName} is {lb}
    {call .buildCommaSeparatedList_}
      {param items: $setMembers /}
    {/call}
    , ...{rb}.
  {/msg